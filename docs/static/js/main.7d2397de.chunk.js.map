{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","placeholder","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","datos","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","props","categories","categoria","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE3B,EAAoCC,mBAAS,WAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OAEE,sBAAMC,SAfY,SAACC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAEpCN,EAAc,MAQnB,SACE,uBACEO,KAAK,OACLC,YAAY,yBACZC,MAAOV,EACPW,SAxBoB,SAACR,GACzBF,EAAcE,EAAES,OAAOF,a,uBCLdG,EAAM,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,4DACD,mCACVC,EAFW,sDACD,mCADC,cAEwDC,UAAUH,GAFlE,qBAIEI,MAAOF,GAJT,cAIXG,EAJW,gBAKIA,EAAKC,OALT,uBAKVC,EALU,EAKVA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAXtB,kBAeXM,GAfW,4CAAF,sDCDNO,EAAc,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACpBJ,EAAcI,EAAdJ,MAAOV,EAAOc,EAAPd,IAId,OACE,mCACE,sBAAKe,UAAU,2DAAf,UACI,qBAAKC,IAAKhB,EAAKiB,IAAMP,IACrB,4BAAIA,UCNDQ,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAGvB,ECJ0B,SAACA,GAC3B,MAA0Bf,mBAAS,CACjCsB,KAAM,GACNc,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAnBCC,qBAAU,WAETzB,EAAOC,GACJyB,MAAK,SAAAC,GAEJC,YAAW,WAETJ,EAAS,CACLhB,KAAMmB,EACNL,SAAS,MAGZ,UAIP,CAACrB,IAGIsB,EDrByBM,CAAa5B,GAAhCa,EAAb,EAAQN,KAAac,EAArB,EAAqBA,QAarB,OACE,qCACE,6BAAKrB,IAEHqB,GAAW,2CAEb,qBAAKJ,UAAU,YAAf,SAGIJ,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,CAEEM,MAAON,GADFA,EAAIC,aEqBRkB,EAhDM,SAACC,GAGpB,MAAoC7C,mBAAS,CAAC,YAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAgBA,OACE,qCACE,gDAEA,cAAC,EAAD,CAAaA,cAAgBA,EAAgB+C,WAAaA,IAE1D,uBAOA,6BAGGA,EAAWtB,KAAK,SAAAuB,GAAS,OAAI,cAAC,EAAD,CAAyBhC,SAAUgC,GAArBA,Y,MCnCpDC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.7d2397de.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  \r\n  const [inputValue, setInputValue] = useState(\"Welcome\");\r\n  \r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n  \r\n  const handleSumit = (e) => {\r\n    e.preventDefault();\r\n    //setCategories([...categories, inputValue]); funciona pasando las categorias\r\n    if(inputValue.trim().length > 2){\r\n      \r\n      setCategories(cate => [ inputValue, ...cate ]);\r\n      // setCategories(inputValue);\r\n         setInputValue(\"\");\r\n      \r\n    } \r\n   \r\n  }\r\n\r\n  return (\r\n    \r\n    <form onSubmit={handleSumit}>\r\n      <input \r\n        type=\"text\"\r\n        placeholder=\"Escribe alguna palabra\"\r\n        value={inputValue} \r\n        onChange={handleInputChange} \r\n      />        \r\n    </form>\r\n          \r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n setCategories: PropTypes.func.isRequired \r\n};\r\n","\r\n\r\n\r\nexport const getGif =async (category) => {\r\n    const api_key = 'KRd2DFMmJAq2pfDvOGO55aWUYQSbPQNL';\r\n    const url = `http://api.giphy.com/v1/gifs/search?api_key=${api_key}&q=${ encodeURI(category) }&limit=4`;\r\n\r\n    const resp = await fetch( url ); //indico que se puede verificar con resp.ok?\r\n    const {data} = await resp.json(); \r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n          id: img.id,\r\n          title: img.title,\r\n          url:img.images?.downsized_medium.url // ? si viene las imagenes que la utilise\r\n        }\r\n    })\r\n\r\n   return gifs;\r\n    \r\n} ","import React from 'react'\r\n\r\nexport const GifGridItem = ({datos}) => {\r\n  const {title, url} = datos;\r\n  \r\n  //console.log(datos)\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"card animate__animated animate__bounce animate__delay-2s\"> \r\n          <img src={url} alt= {title}/>\r\n          <p>{title}</p>\r\n      </div>\r\n      \r\n    </>\r\n  )\r\n}\r\n","import React  from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGif } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n  \r\n  // const [images, setImages] = useState([])\r\n  const { data:images, loading} = useFetchGifs(category);\r\n \r\n\r\n  // useEffect(() => {\r\n  //   getGif(category).then(setImages) // aqui automaticamente le carga el argmento desde la promesa que retorna getGifs\r\n  // },[category] )  \r\n  \r\n  \r\n\r\n //console.log(`soy images ${typeof images}`)\r\n //console.log(`es aqui: ${images}`)\r\n\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n\r\n      { loading && <p>Loading...</p> }\r\n      \r\n      <div className=\"card-grid\">   \r\n            \r\n        {\r\n          images.map( img => (\r\n            <GifGridItem \r\n              key={img.id} \r\n              datos={img}  /> )) // se puede enviar de una vez desestruturado asi {...img}\r\n        }\r\n        \r\n      </div>    \r\n   </>\r\n  )\r\n}\r\n\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGif } from \"../helpers/getGifs\"\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true  \r\n  })\r\n\r\n   useEffect(() => {\r\n    \r\n    getGif(category)\r\n      .then(imgs => {\r\n        \r\n        setTimeout(() => {\r\n\r\n          setState({\r\n              data: imgs,\r\n              loading: false\r\n          })\r\n\r\n        }, 3000);\r\n                \r\n      })\r\n\r\n  },[category] )  \r\n\r\n\r\n  return state;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n//import PropTypes from \"prop-types\";\r\n\r\nconst GifExpertApp = (props) => {\r\n  //const categories = [\"One Punch\", \"Samurai X\", \"Dragon Balll\", \"Superman\"];\r\n\r\n  const [categories, setCategories] = useState([\"Welcome\"]);\r\n\r\n  // const handleAdd = () => {\r\n  //   //setcategories((categories)=>[\"LuiSilva\", ...categories]);\r\n  //   setcategories([\"LuiSilva\", ...categories]);\r\n  // };\r\n\r\n  // const handleSub = () => {\r\n  //   const subCategories = categories.slice(0, categories.length - 1);\r\n  //   setcategories(subCategories);\r\n  // };\r\n\r\n  // const listCategories = categories.map((categoria, index) => (\r\n  //   <li key={index}>{categoria}</li>\r\n  // ));\r\n\r\n  return (\r\n    <>\r\n      <h1>Gif Expert App</h1>\r\n\r\n      <AddCategory setCategories={ setCategories } categories={ categories } />\r\n     \r\n      <hr />\r\n\r\n      {/* <button onClick={handleAdd}>Agregar</button>\r\n      <button onClick={handleSub}>Quitar</button> */}\r\n      \r\n            \r\n\r\n      <ol>\r\n        \r\n        \r\n        {categories.map( categoria => <GifGrid key={categoria} category={categoria} /> )}\r\n\r\n        \r\n      </ol>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\n//GifExpertApp.propTypes = {};\r\n\r\n\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}